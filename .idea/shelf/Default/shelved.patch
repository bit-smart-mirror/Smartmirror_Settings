Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/vcs.xml	(date 1550451153130)
+++ .idea/vcs.xml	(date 1550451153130)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: app/src/main/java/com/example/b/smartmirror_setting/WebviewActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.b.smartmirror_setting;\n\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.webkit.WebSettings;\nimport android.webkit.WebView;\nimport android.webkit.WebViewClient;\nimport com.example.b.smartmirror_setting.MainActivity;\n\npublic class WebviewActivity extends AppCompatActivity {\n\n    public String the_ip_data = MainActivity.ip_set;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_webview);\n\n        // 웹뷰 세팅\n        System.out.println(\"ipdata : \"+the_ip_data);\n        WebView mWebView = (WebView) findViewById(R.id.webview); //레이어와 연결\n        mWebView .setWebViewClient(new WebViewClient()); // 클릭시 새창 안뜨게\n        WebSettings mWebSettings = mWebView.getSettings(); //세부 세팅 등록\n        mWebSettings.setJavaScriptEnabled(true); // 자바스크립트 사용 허용\n        mWebView.loadUrl(\"http://\"+the_ip_data+\":8080/\"); //원하는 URL 입력\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/b/smartmirror_setting/WebviewActivity.java	(revision 07740f089bcb1c19d733e37614bcf13a8771744f)
+++ app/src/main/java/com/example/b/smartmirror_setting/WebviewActivity.java	(date 1550651764457)
@@ -21,6 +21,6 @@
         mWebView .setWebViewClient(new WebViewClient()); // 클릭시 새창 안뜨게
         WebSettings mWebSettings = mWebView.getSettings(); //세부 세팅 등록
         mWebSettings.setJavaScriptEnabled(true); // 자바스크립트 사용 허용
-        mWebView.loadUrl("http://"+the_ip_data+":8080/"); //원하는 URL 입력
+        mWebView.loadUrl("http://"+the_ip_data+":8080/config.html"); //원하는 URL 입력
     }
 }
Index: app/src/main/java/com/example/b/smartmirror_setting/ImgupActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.b.smartmirror_setting;\n\nimport android.annotation.TargetApi;\nimport android.app.Activity;\nimport android.content.ComponentName;\nimport android.content.DialogInterface;\nimport android.content.Intent;\n\nimport android.content.pm.PackageManager;\nimport android.content.pm.ResolveInfo;\nimport android.database.Cursor;\nimport android.graphics.Bitmap;\nimport android.graphics.BitmapFactory;\nimport android.graphics.Color;\nimport android.net.Uri;\nimport android.os.Build;\nimport android.os.Parcelable;\nimport android.provider.MediaStore;\nimport android.support.v7.app.AlertDialog;\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.ImageView;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport okhttp3.MediaType;\nimport okhttp3.MultipartBody;\nimport okhttp3.OkHttpClient;\nimport okhttp3.RequestBody;\nimport okhttp3.ResponseBody;\nimport retrofit2.Call;\nimport retrofit2.Callback;\nimport retrofit2.Response;\nimport retrofit2.Retrofit;\n\n\nimport static android.Manifest.permission.CAMERA;\nimport static android.Manifest.permission.READ_EXTERNAL_STORAGE;\nimport static android.Manifest.permission.WRITE_EXTERNAL_STORAGE;\n\npublic class ImgupActivity extends AppCompatActivity implements View.OnClickListener{\n    ApiService apiService;\n    Uri picUri;\n    private ArrayList<String> permissionsToRequest;\n    private ArrayList<String> permissionsRejected = new ArrayList<>();\n    private ArrayList<String> permissions = new ArrayList<>();\n    private final static int ALL_PERMISSIONS_RESULT = 107;\n    private final static int IMAGE_RESULT = 200;\n    Button fabCamera, fabUpload;\n    Bitmap mBitmap;\n    TextView textView;\n\n    public String the_ip_data = MainActivity.ip_set;\n    private TextView tv_currentIP;\n    public int GALLERY_CODE=1;\n\n\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_imgup);\n        tv_currentIP = (TextView)findViewById(R.id.tv_currentIP);\n        tv_currentIP.setText(the_ip_data);\n        fabCamera = findViewById(R.id.fab);\n        fabUpload = findViewById(R.id.fabUpload);\n        fabCamera.setOnClickListener(this);\n        fabUpload.setOnClickListener(this);\n\n        askPermissions();\n        initRetrofitClient();\n    }\n    private void askPermissions() {\n        permissions.add(CAMERA);\n        permissions.add(WRITE_EXTERNAL_STORAGE);\n        permissions.add(READ_EXTERNAL_STORAGE);\n        permissionsToRequest = findUnAskedPermissions(permissions);\n\n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n            if (permissionsToRequest.size() > 0)\n                requestPermissions(permissionsToRequest.toArray(new String[permissionsToRequest.size()]), ALL_PERMISSIONS_RESULT);\n        }\n    }\n\n    private void initRetrofitClient() {\n        OkHttpClient client = new OkHttpClient.Builder().build();\n\n        apiService = new Retrofit.Builder().baseUrl(\"http://\"+the_ip_data+\":8080\").client(client).build().create(ApiService.class);\n    }\n    public Intent getPickImageChooserIntent() {\n\n        Uri outputFileUri = getCaptureImageOutputUri();\n\n        List<Intent> allIntents = new ArrayList<>();\n        PackageManager packageManager = getPackageManager();\n\n        Intent captureIntent = new Intent(android.provider.MediaStore.ACTION_IMAGE_CAPTURE);\n        List<ResolveInfo> listCam = packageManager.queryIntentActivities(captureIntent, 0);\n        for (ResolveInfo res : listCam) {\n            Intent intent = new Intent(captureIntent);\n            intent.setComponent(new ComponentName(res.activityInfo.packageName, res.activityInfo.name));\n            intent.setPackage(res.activityInfo.packageName);\n            if (outputFileUri != null) {\n                intent.putExtra(MediaStore.EXTRA_OUTPUT, outputFileUri);\n            }\n            allIntents.add(intent);\n        }\n\n        Intent galleryIntent = new Intent(Intent.ACTION_GET_CONTENT);\n        galleryIntent.setType(\"image/*\");\n        List<ResolveInfo> listGallery = packageManager.queryIntentActivities(galleryIntent, 0);\n        for (ResolveInfo res : listGallery) {\n            Intent intent = new Intent(galleryIntent);\n            intent.setComponent(new ComponentName(res.activityInfo.packageName, res.activityInfo.name));\n            intent.setPackage(res.activityInfo.packageName);\n            allIntents.add(intent);\n        }\n\n        Intent mainIntent = allIntents.get(allIntents.size() - 1);\n        for (Intent intent : allIntents) {\n            if (intent.getComponent().getClassName().equals(\"com.android.documentsui.DocumentsActivity\")) {\n                mainIntent = intent;\n                break;\n            }\n        }\n        allIntents.remove(mainIntent);\n\n        Intent chooserIntent = Intent.createChooser(mainIntent, \"Select source\");\n        chooserIntent.putExtra(Intent.EXTRA_INITIAL_INTENTS, allIntents.toArray(new Parcelable[allIntents.size()]));\n\n        return chooserIntent;\n    }\n\n\n    private Uri getCaptureImageOutputUri() {\n        Uri outputFileUri = null;\n        File getImage = getExternalFilesDir(\"\");\n        if (getImage != null) {\n            outputFileUri = Uri.fromFile(new File(getImage.getPath(), \"profile.png\"));\n        }\n        return outputFileUri;\n    }\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n        if (resultCode == Activity.RESULT_OK) {\n            ImageView imageView = findViewById(R.id.imageView);\n            if (requestCode == IMAGE_RESULT) {\n                String filePath = getImageFilePath(data);\n                if (filePath != null) {\n                    mBitmap = BitmapFactory.decodeFile(filePath);\n                    imageView.setImageBitmap(mBitmap);\n                }\n            }\n        }\n    }\n    private String getImageFromFilePath(Intent data) {\n        boolean isCamera = data == null || data.getData() == null;\n\n        if (isCamera) return getCaptureImageOutputUri().getPath();\n        else return getPathFromURI(data.getData());\n    }\n\n    public String getImageFilePath(Intent data) {\n        return getImageFromFilePath(data);\n    }\n\n    private String getPathFromURI(Uri contentUri) {\n        String[] proj = {MediaStore.Audio.Media.DATA};\n        Cursor cursor = getContentResolver().query(contentUri, proj, null, null, null);\n        int column_index = cursor.getColumnIndexOrThrow(MediaStore.Audio.Media.DATA);\n        cursor.moveToFirst();\n        return cursor.getString(column_index);\n    }\n\n    @Override\n    protected void onSaveInstanceState(Bundle outState) {\n        super.onSaveInstanceState(outState);\n\n        outState.putParcelable(\"pic_uri\", picUri);\n    }\n\n    @Override\n    protected void onRestoreInstanceState(Bundle savedInstanceState) {\n        super.onRestoreInstanceState(savedInstanceState);\n\n        // get the file url\n        picUri = savedInstanceState.getParcelable(\"pic_uri\");\n    }\n\n    private ArrayList<String> findUnAskedPermissions(ArrayList<String> wanted) {\n        ArrayList<String> result = new ArrayList<String>();\n\n        for (String perm : wanted) {\n            if (!hasPermission(perm)) {\n                result.add(perm);\n            }\n        }\n        return result;\n    }\n\n    private boolean hasPermission(String permission) {\n        if (canMakeSmores()) {\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n                return (checkSelfPermission(permission) == PackageManager.PERMISSION_GRANTED);\n            }\n        }\n        return true;\n    }\n\n    private void showMessageOKCancel(String message, DialogInterface.OnClickListener okListener) {\n        new AlertDialog.Builder(this)\n                .setMessage(message)\n                .setPositiveButton(\"OK\", okListener)\n                .create()\n                .show();\n    }\n\n    private boolean canMakeSmores() {\n        return (Build.VERSION.SDK_INT > Build.VERSION_CODES.LOLLIPOP_MR1);\n    }\n\n    @TargetApi(Build.VERSION_CODES.M)\n    @Override\n    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {\n\n        switch (requestCode) {\n\n            case ALL_PERMISSIONS_RESULT:\n                for (String perms : permissionsToRequest) {\n                    if (!hasPermission(perms)) {\n                        permissionsRejected.add(perms);\n                    }\n                }\n\n                if (permissionsRejected.size() > 0) {\n\n\n                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n                        if (shouldShowRequestPermissionRationale(permissionsRejected.get(0))) {\n                            showMessageOKCancel(\"이미지 전송을 위해 스토리지,카메라 권한설정이 필요합니다.\",\n                                    new DialogInterface.OnClickListener() {\n                                        @Override\n                                        public void onClick(DialogInterface dialog, int which) {\n                                            requestPermissions(permissionsRejected.toArray(new String[permissionsRejected.size()]), ALL_PERMISSIONS_RESULT);\n                                        }\n                                    });\n                            return;\n                        }\n                    }\n\n                }\n\n                break;\n        }\n\n    }\n\n    private void multipartImageUpload() {\n        try {\n            File filesDir = getApplicationContext().getFilesDir();\n            File file = new File(filesDir, \"image\" + \".\" +\n                    \"\");\n\n            OutputStream os;\n            try {\n                os = new FileOutputStream(file);\n                mBitmap.compress(Bitmap.CompressFormat.JPEG, 100, os);\n                os.flush();\n                os.close();\n            } catch (Exception e) {\n                Log.e(getClass().getSimpleName(), \"Error writing bitmap\", e);\n            }\n\n            ByteArrayOutputStream bos = new ByteArrayOutputStream();\n            mBitmap.compress(Bitmap.CompressFormat.JPEG, 90, bos);\n            byte[] bitmapdata = bos.toByteArray();\n\n\n            FileOutputStream fos = new FileOutputStream(file);\n            fos.write(bitmapdata);\n            fos.flush();\n            fos.close();\n\n\n            RequestBody reqFile = RequestBody.create(MediaType.parse(\"image/*\"), file);\n            MultipartBody.Part body = MultipartBody.Part.createFormData(\"upload\", file.getName(), reqFile);\n            RequestBody name = RequestBody.create(MediaType.parse(\"text/plain\"), \"upload\");\n\n            Call<ResponseBody> req = apiService.postImage(body, name);\n            req.enqueue(new Callback<ResponseBody>() {\n                @Override\n                public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {\n\n                    if (response.code() == 200) {\n                        Toast.makeText(getApplicationContext(), \"업로드에 성공했습니다.\", Toast.LENGTH_SHORT).show();\n                    }\n\n                    //Toast.makeText(getApplicationContext(), response.code() + \" \", Toast.LENGTH_SHORT).show();\n                }\n\n                @Override\n                public void onFailure(Call<ResponseBody> call, Throwable t) {\n                    Toast.makeText(getApplicationContext(), \"업로드에 실패했습니다.\", Toast.LENGTH_SHORT).show();\n                }\n            });\n\n\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n\n    public void onClick(View view) {\n        switch (view.getId()) {\n            case R.id.fab:\n                    startActivityForResult(getPickImageChooserIntent(), IMAGE_RESULT);\n                break;\n\n            case R.id.fabUpload:\n                if (mBitmap != null)\n                    multipartImageUpload();\n                else {\n                    Toast.makeText(getApplicationContext(), \"사진이 선택되지 않았습니다. 사진을 선택해주세요.\", Toast.LENGTH_SHORT).show();\n                }\n                break;\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/b/smartmirror_setting/ImgupActivity.java	(revision 07740f089bcb1c19d733e37614bcf13a8771744f)
+++ app/src/main/java/com/example/b/smartmirror_setting/ImgupActivity.java	(date 1550661457813)
@@ -121,22 +121,30 @@
         galleryIntent.setType("image/*");
         List<ResolveInfo> listGallery = packageManager.queryIntentActivities(galleryIntent, 0);
         for (ResolveInfo res : listGallery) {
-            Intent intent = new Intent(galleryIntent);
-            intent.setComponent(new ComponentName(res.activityInfo.packageName, res.activityInfo.name));
-            intent.setPackage(res.activityInfo.packageName);
-            allIntents.add(intent);
+            System.out.println("res : "+res);
+            System.out.println("list : "+listGallery);
+            if(res.activityInfo.name.equals("com.android.documentsui.DocumentsActivity")){
+            }
+            else {
+                Intent intent = new Intent(galleryIntent);
+                intent.setComponent(new ComponentName(res.activityInfo.packageName, res.activityInfo.name));
+                intent.setPackage(res.activityInfo.packageName);
+                allIntents.add(intent);
+            }
         }
 
         Intent mainIntent = allIntents.get(allIntents.size() - 1);
+        /*
         for (Intent intent : allIntents) {
             if (intent.getComponent().getClassName().equals("com.android.documentsui.DocumentsActivity")) {
                 mainIntent = intent;
                 break;
             }
         }
+        */
         allIntents.remove(mainIntent);
 
-        Intent chooserIntent = Intent.createChooser(mainIntent, "Select source");
+        Intent chooserIntent = Intent.createChooser(mainIntent, "사진을 가져올 앱을 선택해주세요.");
         chooserIntent.putExtra(Intent.EXTRA_INITIAL_INTENTS, allIntents.toArray(new Parcelable[allIntents.size()]));
 
         return chooserIntent;
